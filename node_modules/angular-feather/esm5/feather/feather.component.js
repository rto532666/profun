/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, ElementRef, Input, Inject, ChangeDetectorRef } from '@angular/core';
import { Icons } from './icons.provider';
import { uppercamelcase } from './utils';
var FeatherComponent = /** @class */ (function () {
    function FeatherComponent(elem, changeDetector, icons) {
        this.elem = elem;
        this.changeDetector = changeDetector;
        this.icons = icons;
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    FeatherComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        // icons are provided as an array of objects because of "multi: true"
        /** @type {?} */
        var icons = Object.assign.apply(Object, tslib_1.__spread([{}], ((/** @type {?} */ ((/** @type {?} */ (this.icons)))))));
        /** @type {?} */
        var svg = icons[uppercamelcase(changes.name.currentValue)] || '';
        if (!svg) {
            console.warn("Icon not found: " + changes.name.currentValue + "\n" +
                "Refer to documentation on https://github.com/michaelbazos/angular-feather");
        }
        this.elem.nativeElement.innerHTML = svg;
        this.changeDetector.markForCheck();
    };
    FeatherComponent.decorators = [
        { type: Component, args: [{
                    // tslint:disable-next-line:component-selector
                    selector: 'i-feather, feather-icon',
                    template: "<ng-content></ng-content>\n",
                    styles: [":host{display:inline-block;width:24px;height:24px;fill:none;stroke:currentColor;stroke-width:2px;stroke-linecap:round;stroke-linejoin:round}"]
                }] }
    ];
    /** @nocollapse */
    FeatherComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: ChangeDetectorRef },
        { type: Icons, decorators: [{ type: Inject, args: [Icons,] }] }
    ]; };
    FeatherComponent.propDecorators = {
        name: [{ type: Input }]
    };
    return FeatherComponent;
}());
export { FeatherComponent };
if (false) {
    /** @type {?} */
    FeatherComponent.prototype.name;
    /**
     * @type {?}
     * @private
     */
    FeatherComponent.prototype.elem;
    /**
     * @type {?}
     * @private
     */
    FeatherComponent.prototype.changeDetector;
    /**
     * @type {?}
     * @private
     */
    FeatherComponent.prototype.icons;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmVhdGhlci5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9hbmd1bGFyLWZlYXRoZXIvIiwic291cmNlcyI6WyJmZWF0aGVyL2ZlYXRoZXIuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxpQkFBaUIsRUFBNEIsTUFBTSxlQUFlLENBQUM7QUFDbEgsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBQ3pDLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxTQUFTLENBQUM7QUFHekM7SUFTRSwwQkFDVSxJQUFnQixFQUNoQixjQUFpQyxFQUNsQixLQUFZO1FBRjNCLFNBQUksR0FBSixJQUFJLENBQVk7UUFDaEIsbUJBQWMsR0FBZCxjQUFjLENBQW1CO1FBQ2xCLFVBQUssR0FBTCxLQUFLLENBQU87SUFDbEMsQ0FBQzs7Ozs7SUFFSixzQ0FBVzs7OztJQUFYLFVBQVksT0FBc0I7OztZQUUxQixLQUFLLEdBQUcsTUFBTSxDQUFDLE1BQU0sT0FBYixNQUFNLG9CQUFRLEVBQUUsR0FBSyxDQUFDLG1CQUFBLG1CQUFBLElBQUksQ0FBQyxLQUFLLEVBQU8sRUFBWSxDQUFDLEVBQUM7O1lBQzdELEdBQUcsR0FBRyxLQUFLLENBQUUsY0FBYyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUUsSUFBSSxFQUFFO1FBRXBFLElBQUksQ0FBQyxHQUFHLEVBQUU7WUFDUixPQUFPLENBQUMsSUFBSSxDQUNWLHFCQUFtQixPQUFPLENBQUMsSUFBSSxDQUFDLFlBQVksT0FBSTtnQkFDaEQsMkVBQTJFLENBQzVFLENBQUM7U0FDSDtRQUVELElBQUksQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLFNBQVMsR0FBRyxHQUFHLENBQUM7UUFDeEMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxZQUFZLEVBQUUsQ0FBQztJQUNyQyxDQUFDOztnQkE3QkYsU0FBUyxTQUFDOztvQkFFVCxRQUFRLEVBQUUseUJBQXlCO29CQUNuQyx1Q0FBdUM7O2lCQUV4Qzs7OztnQkFWbUIsVUFBVTtnQkFBaUIsaUJBQWlCO2dCQUN2RCxLQUFLLHVCQWdCVCxNQUFNLFNBQUMsS0FBSzs7O3VCQUxkLEtBQUs7O0lBdUJSLHVCQUFDO0NBQUEsQUE5QkQsSUE4QkM7U0F4QlksZ0JBQWdCOzs7SUFDM0IsZ0NBQXVCOzs7OztJQUdyQixnQ0FBd0I7Ozs7O0lBQ3hCLDBDQUF5Qzs7Ozs7SUFDekMsaUNBQW1DIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBFbGVtZW50UmVmLCBJbnB1dCwgSW5qZWN0LCBDaGFuZ2VEZXRlY3RvclJlZiwgT25DaGFuZ2VzLCBTaW1wbGVDaGFuZ2VzIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBJY29ucyB9IGZyb20gJy4vaWNvbnMucHJvdmlkZXInO1xuaW1wb3J0IHsgdXBwZXJjYW1lbGNhc2UgfSBmcm9tICcuL3V0aWxzJztcblxuXG5AQ29tcG9uZW50KHtcbiAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOmNvbXBvbmVudC1zZWxlY3RvclxuICBzZWxlY3RvcjogJ2ktZmVhdGhlciwgZmVhdGhlci1pY29uJyxcbiAgdGVtcGxhdGVVcmw6ICcuL2ZlYXRoZXIuY29tcG9uZW50Lmh0bWwnLFxuICBzdHlsZVVybHM6IFsgJy4vZmVhdGhlci5jb21wb25lbnQuc2NzcycgXSxcbn0pXG5leHBvcnQgY2xhc3MgRmVhdGhlckNvbXBvbmVudCBpbXBsZW1lbnRzIE9uQ2hhbmdlcyB7XG4gIEBJbnB1dCgpIG5hbWUhOiBzdHJpbmc7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSBlbGVtOiBFbGVtZW50UmVmLFxuICAgIHByaXZhdGUgY2hhbmdlRGV0ZWN0b3I6IENoYW5nZURldGVjdG9yUmVmLFxuICAgIEBJbmplY3QoSWNvbnMpIHByaXZhdGUgaWNvbnM6IEljb25zXG4gICkge31cblxuICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKSB7XG4gICAgLy8gaWNvbnMgYXJlIHByb3ZpZGVkIGFzIGFuIGFycmF5IG9mIG9iamVjdHMgYmVjYXVzZSBvZiBcIm11bHRpOiB0cnVlXCJcbiAgICBjb25zdCBpY29ucyA9IE9iamVjdC5hc3NpZ24oe30sIC4uLih0aGlzLmljb25zIGFzIGFueSBhcyBvYmplY3RbXSkpO1xuICAgIGNvbnN0IHN2ZyA9IGljb25zWyB1cHBlcmNhbWVsY2FzZShjaGFuZ2VzLm5hbWUuY3VycmVudFZhbHVlKSBdIHx8ICcnO1xuXG4gICAgaWYgKCFzdmcpIHtcbiAgICAgIGNvbnNvbGUud2FybihcbiAgICAgICAgYEljb24gbm90IGZvdW5kOiAke2NoYW5nZXMubmFtZS5jdXJyZW50VmFsdWV9XFxuYCArXG4gICAgICAgIGBSZWZlciB0byBkb2N1bWVudGF0aW9uIG9uIGh0dHBzOi8vZ2l0aHViLmNvbS9taWNoYWVsYmF6b3MvYW5ndWxhci1mZWF0aGVyYFxuICAgICAgKTtcbiAgICB9XG5cbiAgICB0aGlzLmVsZW0ubmF0aXZlRWxlbWVudC5pbm5lckhUTUwgPSBzdmc7XG4gICAgdGhpcy5jaGFuZ2VEZXRlY3Rvci5tYXJrRm9yQ2hlY2soKTtcbiAgfVxufVxuIl19