/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ElementRef, Input, Inject, ChangeDetectorRef } from '@angular/core';
import { Icons } from './icons.provider';
import { uppercamelcase } from './utils';
export class FeatherComponent {
    /**
     * @param {?} elem
     * @param {?} changeDetector
     * @param {?} icons
     */
    constructor(elem, changeDetector, icons) {
        this.elem = elem;
        this.changeDetector = changeDetector;
        this.icons = icons;
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        // icons are provided as an array of objects because of "multi: true"
        /** @type {?} */
        const icons = Object.assign({}, ...((/** @type {?} */ ((/** @type {?} */ (this.icons))))));
        /** @type {?} */
        const svg = icons[uppercamelcase(changes.name.currentValue)] || '';
        if (!svg) {
            console.warn(`Icon not found: ${changes.name.currentValue}\n` +
                `Refer to documentation on https://github.com/michaelbazos/angular-feather`);
        }
        this.elem.nativeElement.innerHTML = svg;
        this.changeDetector.markForCheck();
    }
}
FeatherComponent.decorators = [
    { type: Component, args: [{
                // tslint:disable-next-line:component-selector
                selector: 'i-feather, feather-icon',
                template: "<ng-content></ng-content>\n",
                styles: [":host{display:inline-block;width:24px;height:24px;fill:none;stroke:currentColor;stroke-width:2px;stroke-linecap:round;stroke-linejoin:round}"]
            }] }
];
/** @nocollapse */
FeatherComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: ChangeDetectorRef },
    { type: Icons, decorators: [{ type: Inject, args: [Icons,] }] }
];
FeatherComponent.propDecorators = {
    name: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    FeatherComponent.prototype.name;
    /**
     * @type {?}
     * @private
     */
    FeatherComponent.prototype.elem;
    /**
     * @type {?}
     * @private
     */
    FeatherComponent.prototype.changeDetector;
    /**
     * @type {?}
     * @private
     */
    FeatherComponent.prototype.icons;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmVhdGhlci5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9hbmd1bGFyLWZlYXRoZXIvIiwic291cmNlcyI6WyJmZWF0aGVyL2ZlYXRoZXIuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLGlCQUFpQixFQUE0QixNQUFNLGVBQWUsQ0FBQztBQUNsSCxPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFDekMsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLFNBQVMsQ0FBQztBQVN6QyxNQUFNLE9BQU8sZ0JBQWdCOzs7Ozs7SUFHM0IsWUFDVSxJQUFnQixFQUNoQixjQUFpQyxFQUNsQixLQUFZO1FBRjNCLFNBQUksR0FBSixJQUFJLENBQVk7UUFDaEIsbUJBQWMsR0FBZCxjQUFjLENBQW1CO1FBQ2xCLFVBQUssR0FBTCxLQUFLLENBQU87SUFDbEMsQ0FBQzs7Ozs7SUFFSixXQUFXLENBQUMsT0FBc0I7OztjQUUxQixLQUFLLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUUsR0FBRyxDQUFDLG1CQUFBLG1CQUFBLElBQUksQ0FBQyxLQUFLLEVBQU8sRUFBWSxDQUFDLENBQUM7O2NBQzdELEdBQUcsR0FBRyxLQUFLLENBQUUsY0FBYyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUUsSUFBSSxFQUFFO1FBRXBFLElBQUksQ0FBQyxHQUFHLEVBQUU7WUFDUixPQUFPLENBQUMsSUFBSSxDQUNWLG1CQUFtQixPQUFPLENBQUMsSUFBSSxDQUFDLFlBQVksSUFBSTtnQkFDaEQsMkVBQTJFLENBQzVFLENBQUM7U0FDSDtRQUVELElBQUksQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLFNBQVMsR0FBRyxHQUFHLENBQUM7UUFDeEMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxZQUFZLEVBQUUsQ0FBQztJQUNyQyxDQUFDOzs7WUE3QkYsU0FBUyxTQUFDOztnQkFFVCxRQUFRLEVBQUUseUJBQXlCO2dCQUNuQyx1Q0FBdUM7O2FBRXhDOzs7O1lBVm1CLFVBQVU7WUFBaUIsaUJBQWlCO1lBQ3ZELEtBQUssdUJBZ0JULE1BQU0sU0FBQyxLQUFLOzs7bUJBTGQsS0FBSzs7OztJQUFOLGdDQUF1Qjs7Ozs7SUFHckIsZ0NBQXdCOzs7OztJQUN4QiwwQ0FBeUM7Ozs7O0lBQ3pDLGlDQUFtQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgRWxlbWVudFJlZiwgSW5wdXQsIEluamVjdCwgQ2hhbmdlRGV0ZWN0b3JSZWYsIE9uQ2hhbmdlcywgU2ltcGxlQ2hhbmdlcyB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgSWNvbnMgfSBmcm9tICcuL2ljb25zLnByb3ZpZGVyJztcbmltcG9ydCB7IHVwcGVyY2FtZWxjYXNlIH0gZnJvbSAnLi91dGlscyc7XG5cblxuQENvbXBvbmVudCh7XG4gIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpjb21wb25lbnQtc2VsZWN0b3JcbiAgc2VsZWN0b3I6ICdpLWZlYXRoZXIsIGZlYXRoZXItaWNvbicsXG4gIHRlbXBsYXRlVXJsOiAnLi9mZWF0aGVyLmNvbXBvbmVudC5odG1sJyxcbiAgc3R5bGVVcmxzOiBbICcuL2ZlYXRoZXIuY29tcG9uZW50LnNjc3MnIF0sXG59KVxuZXhwb3J0IGNsYXNzIEZlYXRoZXJDb21wb25lbnQgaW1wbGVtZW50cyBPbkNoYW5nZXMge1xuICBASW5wdXQoKSBuYW1lITogc3RyaW5nO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgZWxlbTogRWxlbWVudFJlZixcbiAgICBwcml2YXRlIGNoYW5nZURldGVjdG9yOiBDaGFuZ2VEZXRlY3RvclJlZixcbiAgICBASW5qZWN0KEljb25zKSBwcml2YXRlIGljb25zOiBJY29uc1xuICApIHt9XG5cbiAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcykge1xuICAgIC8vIGljb25zIGFyZSBwcm92aWRlZCBhcyBhbiBhcnJheSBvZiBvYmplY3RzIGJlY2F1c2Ugb2YgXCJtdWx0aTogdHJ1ZVwiXG4gICAgY29uc3QgaWNvbnMgPSBPYmplY3QuYXNzaWduKHt9LCAuLi4odGhpcy5pY29ucyBhcyBhbnkgYXMgb2JqZWN0W10pKTtcbiAgICBjb25zdCBzdmcgPSBpY29uc1sgdXBwZXJjYW1lbGNhc2UoY2hhbmdlcy5uYW1lLmN1cnJlbnRWYWx1ZSkgXSB8fCAnJztcblxuICAgIGlmICghc3ZnKSB7XG4gICAgICBjb25zb2xlLndhcm4oXG4gICAgICAgIGBJY29uIG5vdCBmb3VuZDogJHtjaGFuZ2VzLm5hbWUuY3VycmVudFZhbHVlfVxcbmAgK1xuICAgICAgICBgUmVmZXIgdG8gZG9jdW1lbnRhdGlvbiBvbiBodHRwczovL2dpdGh1Yi5jb20vbWljaGFlbGJhem9zL2FuZ3VsYXItZmVhdGhlcmBcbiAgICAgICk7XG4gICAgfVxuXG4gICAgdGhpcy5lbGVtLm5hdGl2ZUVsZW1lbnQuaW5uZXJIVE1MID0gc3ZnO1xuICAgIHRoaXMuY2hhbmdlRGV0ZWN0b3IubWFya0ZvckNoZWNrKCk7XG4gIH1cbn1cbiJdfQ==